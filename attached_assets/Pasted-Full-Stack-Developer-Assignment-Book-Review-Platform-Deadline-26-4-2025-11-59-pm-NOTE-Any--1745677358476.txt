Full Stack Developer Assignment: Book Review Platform
Deadline :- 26/4/2025 ; 11:59 pm
NOTE : Any entries after the deadline will not be considered.
Please do not use any type of co-pilots or AI models(including friends) to work on this.
Use on MERN for this activity.
Objective
Develop a book review platform where users can browse books, read and write reviews, and rate books. The application should have a React frontend and a Node.js backend using Express and SQL/MongoDB.
Requirements
Frontend (React):
	1.	Create a responsive UI with the following components/pages:
	•	Home Page with featured books
	•	Book Listing Page with search and filter
	•	Individual Book Page with book details, ratings, and reviews
	•	User Profile Page
	•	Review Submission Form
	2.	Implement:
	•	State management using Redux or React Context
	•	React Router for page navigation
	•	Integration with backend APIs
	•	Error handling and loading states

⸻

Backend (Node.js, Express, SQL/MongoDB):
	1.	Build a RESTful API with these endpoints:
	•	GET /books – Get all books (with pagination)
	•	GET /books/:id – Get book details
	•	POST /books – Add a new book (admin only)
	•	GET /reviews?bookId=xxx – Get reviews for a book
	•	POST /reviews – Submit a new review
	•	GET /users/:id – Get user profile
	•	PUT /users/:id – Update user profile
	2.	Include:
	•	Input validation
	•	Proper error handling
	•	Use of MongoDB or SQL for data persistence

⸻

Bonus Task – LLM Integration: GPT-Powered Review Refinement
	•	When a user submits a review, provide an option to “Refine with AI.”
	•	Use OpenAI’s GPT API (or any LLM API) to clean up grammar, enhance clarity, or improve tone of the review.
	•	Display both the original and the refined version.
	•	Let the user choose which version to submit.

⸻

Evaluation Criteria:
	1.	Code quality, structure, and readability
	2.	Use of React best practices (hooks, state, routing)
	3.	Clean and RESTful backend API design
	4.	Thoughtful database schema
	5.	Robust error handling
	6.	UI/UX design and responsiveness
	7.	Clear documentation and commit history
	8.	Use of GPT/LLM API (bonus)

⸻

Submission Guidelines:
	•	Share a GitHub repo link with your full code
	•	Include a README in GitHub with: Setup instructions, Tech stack and tools used
	•	Any known issues or extra features
	•	Provide a live demo URL if deployed

